// Code generated by MockGen. DO NOT EDIT.
// Source: repository/interface.go

// Package mocks is a generated GoMock package.
package mocks

import (
	models "pay_later_service/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockRepoInterface is a mock of RepoInterface interface.
type MockRepoInterface struct {
	ctrl     *gomock.Controller
	recorder *MockRepoInterfaceMockRecorder
}

// MockRepoInterfaceMockRecorder is the mock recorder for MockRepoInterface.
type MockRepoInterfaceMockRecorder struct {
	mock *MockRepoInterface
}

// NewMockRepoInterface creates a new mock instance.
func NewMockRepoInterface(ctrl *gomock.Controller) *MockRepoInterface {
	mock := &MockRepoInterface{ctrl: ctrl}
	mock.recorder = &MockRepoInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepoInterface) EXPECT() *MockRepoInterfaceMockRecorder {
	return m.recorder
}

// AddMerchant mocks base method.
func (m *MockRepoInterface) AddMerchant(merchant *models.Merchant) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddMerchant", merchant)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddMerchant indicates an expected call of AddMerchant.
func (mr *MockRepoInterfaceMockRecorder) AddMerchant(merchant interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMerchant", reflect.TypeOf((*MockRepoInterface)(nil).AddMerchant), merchant)
}

// AddUser mocks base method.
func (m *MockRepoInterface) AddUser(userDetails *models.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddUser", userDetails)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddUser indicates an expected call of AddUser.
func (mr *MockRepoInterfaceMockRecorder) AddUser(userDetails interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUser", reflect.TypeOf((*MockRepoInterface)(nil).AddUser), userDetails)
}

// GetAllUsers mocks base method.
func (m *MockRepoInterface) GetAllUsers() ([]models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllUsers")
	ret0, _ := ret[0].([]models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllUsers indicates an expected call of GetAllUsers.
func (mr *MockRepoInterfaceMockRecorder) GetAllUsers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllUsers", reflect.TypeOf((*MockRepoInterface)(nil).GetAllUsers))
}

// GetMerchant mocks base method.
func (m *MockRepoInterface) GetMerchant(merchantID int) (models.Merchant, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMerchant", merchantID)
	ret0, _ := ret[0].(models.Merchant)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMerchant indicates an expected call of GetMerchant.
func (mr *MockRepoInterfaceMockRecorder) GetMerchant(merchantID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMerchant", reflect.TypeOf((*MockRepoInterface)(nil).GetMerchant), merchantID)
}

// GetMerchantDiscountsReport mocks base method.
func (m *MockRepoInterface) GetMerchantDiscountsReport(merchantID int) (float32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMerchantDiscountsReport", merchantID)
	ret0, _ := ret[0].(float32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMerchantDiscountsReport indicates an expected call of GetMerchantDiscountsReport.
func (mr *MockRepoInterfaceMockRecorder) GetMerchantDiscountsReport(merchantID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMerchantDiscountsReport", reflect.TypeOf((*MockRepoInterface)(nil).GetMerchantDiscountsReport), merchantID)
}

// GetUser mocks base method.
func (m *MockRepoInterface) GetUser(userID int) (models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", userID)
	ret0, _ := ret[0].(models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockRepoInterfaceMockRecorder) GetUser(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockRepoInterface)(nil).GetUser), userID)
}

// GetUsersAtLowCreditLimit mocks base method.
func (m *MockRepoInterface) GetUsersAtLowCreditLimit(thresholdLimit float32) ([]models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsersAtLowCreditLimit", thresholdLimit)
	ret0, _ := ret[0].([]models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsersAtLowCreditLimit indicates an expected call of GetUsersAtLowCreditLimit.
func (mr *MockRepoInterfaceMockRecorder) GetUsersAtLowCreditLimit(thresholdLimit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsersAtLowCreditLimit", reflect.TypeOf((*MockRepoInterface)(nil).GetUsersAtLowCreditLimit), thresholdLimit)
}

// HandleUserOrder mocks base method.
func (m *MockRepoInterface) HandleUserOrder(user models.User, merchantID int, orderAmount, discountedAmount, newAvailableCreditLimit float32) (models.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleUserOrder", user, merchantID, orderAmount, discountedAmount, newAvailableCreditLimit)
	ret0, _ := ret[0].(models.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HandleUserOrder indicates an expected call of HandleUserOrder.
func (mr *MockRepoInterfaceMockRecorder) HandleUserOrder(user, merchantID, orderAmount, discountedAmount, newAvailableCreditLimit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleUserOrder", reflect.TypeOf((*MockRepoInterface)(nil).HandleUserOrder), user, merchantID, orderAmount, discountedAmount, newAvailableCreditLimit)
}

// HandleUserPayment mocks base method.
func (m *MockRepoInterface) HandleUserPayment(user *models.User, paymentAmount float32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleUserPayment", user, paymentAmount)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleUserPayment indicates an expected call of HandleUserPayment.
func (mr *MockRepoInterfaceMockRecorder) HandleUserPayment(user, paymentAmount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleUserPayment", reflect.TypeOf((*MockRepoInterface)(nil).HandleUserPayment), user, paymentAmount)
}

// UpdateMerchant mocks base method.
func (m *MockRepoInterface) UpdateMerchant(merchant models.Merchant) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMerchant", merchant)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateMerchant indicates an expected call of UpdateMerchant.
func (mr *MockRepoInterfaceMockRecorder) UpdateMerchant(merchant interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMerchant", reflect.TypeOf((*MockRepoInterface)(nil).UpdateMerchant), merchant)
}
