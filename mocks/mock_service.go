// Code generated by MockGen. DO NOT EDIT.
// Source: service/interfaces.go

// Package mocks is a generated GoMock package.
package mocks

import (
	models "pay_later_service/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockSimpleService is a mock of SimpleService interface.
type MockSimpleService struct {
	ctrl     *gomock.Controller
	recorder *MockSimpleServiceMockRecorder
}

// MockSimpleServiceMockRecorder is the mock recorder for MockSimpleService.
type MockSimpleServiceMockRecorder struct {
	mock *MockSimpleService
}

// NewMockSimpleService creates a new mock instance.
func NewMockSimpleService(ctrl *gomock.Controller) *MockSimpleService {
	mock := &MockSimpleService{ctrl: ctrl}
	mock.recorder = &MockSimpleServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSimpleService) EXPECT() *MockSimpleServiceMockRecorder {
	return m.recorder
}

// CreateMerchant mocks base method.
func (m *MockSimpleService) CreateMerchant(merchantName string, discountPercent float32) (models.Merchant, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMerchant", merchantName, discountPercent)
	ret0, _ := ret[0].(models.Merchant)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMerchant indicates an expected call of CreateMerchant.
func (mr *MockSimpleServiceMockRecorder) CreateMerchant(merchantName, discountPercent interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMerchant", reflect.TypeOf((*MockSimpleService)(nil).CreateMerchant), merchantName, discountPercent)
}

// CreateUser mocks base method.
func (m *MockSimpleService) CreateUser(userName, userEmail string, creditLimitOffered float32) (models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", userName, userEmail, creditLimitOffered)
	ret0, _ := ret[0].(models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockSimpleServiceMockRecorder) CreateUser(userName, userEmail, creditLimitOffered interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockSimpleService)(nil).CreateUser), userName, userEmail, creditLimitOffered)
}

// FetchUserDetails mocks base method.
func (m *MockSimpleService) FetchUserDetails(userID int) (models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchUserDetails", userID)
	ret0, _ := ret[0].(models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchUserDetails indicates an expected call of FetchUserDetails.
func (mr *MockSimpleServiceMockRecorder) FetchUserDetails(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchUserDetails", reflect.TypeOf((*MockSimpleService)(nil).FetchUserDetails), userID)
}

// HandleUserOrder mocks base method.
func (m *MockSimpleService) HandleUserOrder(userID, merchantID int, transactionAmount float32) (models.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleUserOrder", userID, merchantID, transactionAmount)
	ret0, _ := ret[0].(models.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HandleUserOrder indicates an expected call of HandleUserOrder.
func (mr *MockSimpleServiceMockRecorder) HandleUserOrder(userID, merchantID, transactionAmount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleUserOrder", reflect.TypeOf((*MockSimpleService)(nil).HandleUserOrder), userID, merchantID, transactionAmount)
}

// HandleUserTransaction mocks base method.
func (m *MockSimpleService) HandleUserTransaction(userID int, paymentAmount float32) (models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleUserTransaction", userID, paymentAmount)
	ret0, _ := ret[0].(models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HandleUserTransaction indicates an expected call of HandleUserTransaction.
func (mr *MockSimpleServiceMockRecorder) HandleUserTransaction(userID, paymentAmount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleUserTransaction", reflect.TypeOf((*MockSimpleService)(nil).HandleUserTransaction), userID, paymentAmount)
}

// UpdateMerchantDiscount mocks base method.
func (m *MockSimpleService) UpdateMerchantDiscount(merchantID int, discountPercent float32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMerchantDiscount", merchantID, discountPercent)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateMerchantDiscount indicates an expected call of UpdateMerchantDiscount.
func (mr *MockSimpleServiceMockRecorder) UpdateMerchantDiscount(merchantID, discountPercent interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMerchantDiscount", reflect.TypeOf((*MockSimpleService)(nil).UpdateMerchantDiscount), merchantID, discountPercent)
}
